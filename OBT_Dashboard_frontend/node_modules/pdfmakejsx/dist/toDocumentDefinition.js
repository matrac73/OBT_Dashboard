"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var strings_1 = require("./strings");
var isElement = function (data) {
    return data.type === 'element';
};
var isText = function (data) {
    return data.type === 'text';
};
var handleChild = function (child) {
    if (ramda_1.is(Number, child)) {
        return String(child);
    }
    if (ramda_1.is(String, child)) {
        return child;
    }
    return isText(child) ? String(child.text) : convert(child);
};
var isCanvasElement = function (data) {
    return [
        'rect',
        'polyline',
        'ellipse',
        'line',
    ].includes(data.tagName);
};
var convert = function (data) {
    var _a;
    if (isElement(data)) {
        var tagName = data.tagName, attributes = data.attributes, children = data.children;
        var simpleTags = [
            'columns',
            'ol',
            'stack',
            'text',
            'ul',
        ];
        if (simpleTags.includes(tagName)) {
            return __assign((_a = {}, _a[tagName] = children.map(handleChild), _a), attributes);
        }
        if (tagName === 'image') {
            return __assign({ image: ramda_1.propOr('', 'src', attributes) }, ramda_1.omit(['src'], attributes));
        }
        if (tagName === 'table') {
            return __assign({}, attributes, { layout: ramda_1.propOr(undefined, 'layout', attributes), table: __assign({ body: children
                        .filter(ramda_1.propEq('tagName', 'row'))
                        .filter(isElement)
                        .map(function (_a) {
                        var children = _a.children;
                        return children.map(handleChild);
                    }) }, ramda_1.omit(['layout'], attributes)) });
        }
        if (tagName === 'canvas') {
            return {
                canvas: children
                    .filter(isElement)
                    .filter(isCanvasElement)
                    .map(function (_a) {
                    var tagName = _a.tagName, attributes = _a.attributes;
                    return (__assign({ type: tagName }, attributes));
                })
            };
        }
        return null;
    }
    return null;
};
var parentElementIsPdf = function (data) {
    if (isText(data)) {
        return false;
    }
    return data.type === 'element' && data.tagName === 'pdf';
};
var getElementChildren = function (tagName, data) {
    return ramda_1.propOr([], 'children', ramda_1.find(ramda_1.pathEq(['tagName'], tagName), ramda_1.prop('children', data)));
};
exports.default = (function (data) {
    if (isElement(data) && parentElementIsPdf(data)) {
        return __assign({}, data.attributes, { content: getElementChildren('content', data).map(convert).filter(Boolean), footer: getElementChildren('footer', data).map(convert).filter(Boolean), header: getElementChildren('header', data).map(convert).filter(Boolean), background: getElementChildren('background', data).map(convert).filter(Boolean) });
    }
    throw new Error(strings_1.ERROR.parentIsNotPdf);
});
